From 15842a90bb3c31be71e3463772591287e7ce1c93 Mon Sep 17 00:00:00 2001
From: Liam Girdwood <liam.r.girdwood@linux.intel.com>
Date: Wed, 5 Feb 2014 09:51:25 +0000
Subject: [PATCH 04/27] dma: dw: Allow driver usage on platforms without HCLK.

Some Intel platforms that use the DW DMA driver dont clock the DMA
engine with HCLK. Add some platform data and DT entry to disable HCLK
usage for these systems.

Signed-off-by: Liam Girdwood <liam.r.girdwood@linux.intel.com>
---
 drivers/dma/dw/platform.c            | 27 ++++++++++++++++++---------
 include/linux/platform_data/dma-dw.h |  2 ++
 2 files changed, 20 insertions(+), 9 deletions(-)

diff --git a/drivers/dma/dw/platform.c b/drivers/dma/dw/platform.c
index 68a4815..d3f6726 100644
--- a/drivers/dma/dw/platform.c
+++ b/drivers/dma/dw/platform.c
@@ -119,6 +119,9 @@ dw_dma_parse_dt(struct platform_device *pdev)
 	if (of_property_read_bool(np, "is_private"))
 		pdata->is_private = true;
 
+	if (of_property_read_bool(np, "no_hclk"))
+		pdata->no_hclk = true;
+
 	if (!of_property_read_u32(np, "chan_allocation_order", &tmp))
 		pdata->chan_allocation_order = (unsigned char)tmp;
 
@@ -187,12 +190,14 @@ static int dw_probe(struct platform_device *pdev)
 
 	chip->dev = dev;
 
-	chip->clk = devm_clk_get(chip->dev, "hclk");
-	if (IS_ERR(chip->clk))
-		return PTR_ERR(chip->clk);
-	err = clk_prepare_enable(chip->clk);
-	if (err)
-		return err;
+	if (!pdata->no_hclk) {
+		chip->clk = devm_clk_get(chip->dev, "hclk");
+		if (IS_ERR(chip->clk))
+			return PTR_ERR(chip->clk);
+		err = clk_prepare_enable(chip->clk);
+		if (err)
+			return err;
+	}
 
 	pm_runtime_enable(&pdev->dev);
 
@@ -240,7 +245,8 @@ static void dw_shutdown(struct platform_device *pdev)
 	struct dw_dma_chip *chip = platform_get_drvdata(pdev);
 
 	dw_dma_disable(chip);
-	clk_disable_unprepare(chip->clk);
+	if (chip->clk)
+		clk_disable_unprepare(chip->clk);
 }
 
 #ifdef CONFIG_OF
@@ -276,7 +282,8 @@ static int dw_suspend_late(struct device *dev)
 	struct dw_dma_chip *chip = platform_get_drvdata(pdev);
 
 	dw_dma_disable(chip);
-	clk_disable_unprepare(chip->clk);
+	if (chip->clk)
+		clk_disable_unprepare(chip->clk);
 
 	return 0;
 }
@@ -286,7 +293,9 @@ static int dw_resume_early(struct device *dev)
 	struct platform_device *pdev = to_platform_device(dev);
 	struct dw_dma_chip *chip = platform_get_drvdata(pdev);
 
-	clk_prepare_enable(chip->clk);
+	if (chip->clk)
+		clk_prepare_enable(chip->clk);
+
 	return dw_dma_enable(chip);
 }
 
diff --git a/include/linux/platform_data/dma-dw.h b/include/linux/platform_data/dma-dw.h
index 03b6095..bb522b1 100644
--- a/include/linux/platform_data/dma-dw.h
+++ b/include/linux/platform_data/dma-dw.h
@@ -37,6 +37,7 @@ struct dw_dma_slave {
  * @nr_channels: Number of channels supported by hardware (max 8)
  * @is_private: The device channels should be marked as private and not for
  *	by the general purpose DMA channel allocator.
+ * @no_hclk: No HCLK is required by driver for operation.
  * @is_memcpy: The device channels do support memory-to-memory transfers.
  * @chan_allocation_order: Allocate channels starting from 0 or 7
  * @chan_priority: Set channel priority increasing from 0 to 7 or 7 to 0.
@@ -48,6 +49,7 @@ struct dw_dma_slave {
 struct dw_dma_platform_data {
 	unsigned int	nr_channels;
 	bool		is_private;
+	bool		no_hclk;
 	bool		is_memcpy;
 #define CHAN_ALLOCATION_ASCENDING	0	/* zero to seven */
 #define CHAN_ALLOCATION_DESCENDING	1	/* seven to zero */
-- 
2.9.3

