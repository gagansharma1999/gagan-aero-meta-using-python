From 4ead7ff28b9658d66ad7732a3e18df671000efc5 Mon Sep 17 00:00:00 2001
From: Lucas De Marchi <lucas.demarchi@intel.com>
Date: Fri, 21 Apr 2017 01:41:29 -0700
Subject: [PATCH 12/27] usb: otg: add cherryview support

This adds CHT phy mux and xhci capabilities for Aero dev kit.
Portions of the original code have been removed to implement
basic features only.

This code is not intended to be submitted to LKML, cleanup and
adaptation is needed for latest kernels. In future, this patch
should be reverted in favor of a driver that has been reviewed
and accepted in LKML.

As such, this contains multiple logical blocks to keep changes
contained in a single patch. Since it is a big squash patch,
I think it is worth mentioning the people that have contributed
to this code:

    David A Cohen <david.a.cohen@intel.com>
    Dawid Manikowski <dawid.manikowski@intel.com>
    Du, Changbin <changbin.du@intel.com>
    Fei Yang <fei.yang@intel.com>
    fu jin <fu.jin@intel.com>
    Hetian Fang <hetian.fang@intel.com>
    Jiebing Li <jiebing.li@intel.com>
    Konrad Leszczynski <konrad.leszczynski@intel.com>
    Liu Linhong <linhong.liu@intel.com>
    Lu Baolu <baolu.lu@linux.intel.com>
    Matt Ranostay <matt.ranostay@intel.com>
    Miroslaw Swiader <miroslaw.swiader@intel.com>
    mwalews <marcin.walewski@intel.com>
    Robert Dobrowolski <robert.dobrowolski@intel.com>
    Wu, Hao <hao.wu@intel.com>
    xiao jin <jin.xiao@intel.com>
    yangzhon <yang.zhong@intel.com>
    Zhang Yanmin <yanmin.zhang@intel.com>
    Zhuang Jin Can <jin.can.zhuang@intel.com>

Signed-off-by: Omar Ramirez Luna <omar.r.ramirez.luna@intel.com>
---
 drivers/usb/core/Kconfig          |   1 +
 drivers/usb/dwc3/dwc3-pci.c       |   7 +
 drivers/usb/dwc3/gadget.c         |   8 +
 drivers/usb/host/Makefile         |   2 +-
 drivers/usb/host/xhci-intel-cap.c | 141 ++++++++
 drivers/usb/host/xhci-intel-cap.h |  38 ++
 drivers/usb/host/xhci-pci.c       |   7 +
 drivers/usb/host/xhci.h           |   2 +
 drivers/usb/phy/Kconfig           |   7 +
 drivers/usb/phy/Makefile          |   1 +
 drivers/usb/phy/phy-intel-cht.c   | 741 ++++++++++++++++++++++++++++++++++++++
 drivers/usb/phy/phy-intel-cht.h   |  34 ++
 12 files changed, 988 insertions(+), 1 deletion(-)
 create mode 100644 drivers/usb/host/xhci-intel-cap.c
 create mode 100644 drivers/usb/host/xhci-intel-cap.h
 create mode 100644 drivers/usb/phy/phy-intel-cht.c
 create mode 100644 drivers/usb/phy/phy-intel-cht.h

diff --git a/drivers/usb/core/Kconfig b/drivers/usb/core/Kconfig
index dd28010..1c4db47 100644
--- a/drivers/usb/core/Kconfig
+++ b/drivers/usb/core/Kconfig
@@ -78,6 +78,7 @@ config USB_OTG_BLACKLIST_HUB
 config USB_OTG_FSM
 	tristate "USB 2.0 OTG FSM implementation"
 	depends on USB && USB_OTG
+	default y
 	select USB_PHY
 	help
 	  Implements OTG Finite State Machine as specified in On-The-Go
diff --git a/drivers/usb/dwc3/dwc3-pci.c b/drivers/usb/dwc3/dwc3-pci.c
index 04d7e74..4c44915 100644
--- a/drivers/usb/dwc3/dwc3-pci.c
+++ b/drivers/usb/dwc3/dwc3-pci.c
@@ -138,6 +138,7 @@ static int dwc3_pci_probe(struct pci_dev *pci,
 	struct platform_device	*dwc3;
 	int			ret;
 	struct device		*dev = &pci->dev;
+	struct platform_device  *pdev;
 
 	ret = pcim_enable_device(pci);
 	if (ret) {
@@ -147,6 +148,12 @@ static int dwc3_pci_probe(struct pci_dev *pci,
 
 	pci_set_master(pci);
 
+	pdev = platform_device_alloc("intel-cht-otg", 0);
+	if (!pdev)
+		return -ENOMEM;
+	pdev->dev.parent = &pci->dev;
+	platform_device_add(pdev);
+
 	dwc3 = platform_device_alloc("dwc3", PLATFORM_DEVID_AUTO);
 	if (!dwc3) {
 		dev_err(dev, "couldn't allocate dwc3 device\n");
diff --git a/drivers/usb/dwc3/gadget.c b/drivers/usb/dwc3/gadget.c
index 39fc7fc..250a33e 100644
--- a/drivers/usb/dwc3/gadget.c
+++ b/drivers/usb/dwc3/gadget.c
@@ -1753,6 +1753,14 @@ static int dwc3_gadget_start(struct usb_gadget *g,
 	int			ret = 0;
 	int			irq;
 
+	if (dwc->usb2_phy) {
+		ret = otg_set_peripheral(dwc->usb2_phy->otg, &dwc->gadget);
+		if (ret == -ENOTSUPP)
+			dev_info(dwc->dev, "no OTG driver registered\n");
+		else if (ret)
+			goto err0;
+	}
+
 	irq = platform_get_irq(to_platform_device(dwc->dev), 0);
 	ret = request_threaded_irq(irq, dwc3_interrupt, dwc3_thread_interrupt,
 			IRQF_SHARED, "dwc3", dwc->ev_buf);
diff --git a/drivers/usb/host/Makefile b/drivers/usb/host/Makefile
index e7558ab..ba6e13b 100644
--- a/drivers/usb/host/Makefile
+++ b/drivers/usb/host/Makefile
@@ -12,7 +12,7 @@ fhci-$(CONFIG_FHCI_DEBUG) += fhci-dbg.o
 
 xhci-hcd-y := xhci.o xhci-mem.o
 xhci-hcd-y += xhci-ring.o xhci-hub.o xhci-dbg.o
-xhci-hcd-y += xhci-trace.o
+xhci-hcd-y += xhci-trace.o xhci-intel-cap.o
 
 xhci-plat-hcd-y := xhci-plat.o
 ifneq ($(CONFIG_USB_XHCI_MVEBU), )
diff --git a/drivers/usb/host/xhci-intel-cap.c b/drivers/usb/host/xhci-intel-cap.c
new file mode 100644
index 0000000..412d81c
--- /dev/null
+++ b/drivers/usb/host/xhci-intel-cap.c
@@ -0,0 +1,141 @@
+/*
+ * Intel Vendor Defined XHCI extended capability
+ *
+ * Copyright (C) 2014 Intel Corp.
+ *
+ * Author: Wu, Hao
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful, but
+ * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
+ * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program;
+ */
+
+#include <linux/usb/phy.h>
+#include <linux/usb/otg.h>
+
+#include "xhci.h"
+#include "xhci-intel-cap.h"
+
+int xhci_intel_vendor_cap_init(struct xhci_hcd *xhci)
+{
+	struct usb_hcd *hcd;
+	int ext_offset, retval;
+
+	ext_offset = XHCI_HCC_EXT_CAPS(readl(&xhci->cap_regs->hcc_params));
+	ext_offset = xhci_find_ext_cap_by_id(&xhci->cap_regs->hc_capbase,
+			ext_offset << 2, XHCI_EXT_CAPS_INTEL_HOST_CAP);
+	if (!ext_offset)
+		return -ENODEV;
+
+	xhci->phy_mux_regs = &xhci->cap_regs->hc_capbase + (ext_offset >> 2);
+
+	xhci_dbg(xhci, "Intel Vendor Defined Cap %d initialization\n",
+					XHCI_EXT_CAPS_INTEL_HOST_CAP);
+	xhci_dbg(xhci, "regs offset = 0x%x, phy_mux_regs = 0x%p\n",
+					ext_offset, xhci->phy_mux_regs);
+
+	/* If This capbility is found, register host on PHY for OTG purpose */
+	hcd = xhci_to_hcd(xhci);
+	hcd->usb_phy = usb_get_phy(USB_PHY_TYPE_USB2);
+
+	if (!IS_ERR_OR_NULL(hcd->usb_phy)) {
+		retval = otg_set_host(hcd->usb_phy->otg, &hcd->self);
+		if (retval)
+			usb_put_phy(hcd->usb_phy);
+		else {
+			/* if register for OTG succeed, then set mux to device
+			 * mode by default for OTG purpose
+			 */
+			xhci_err(xhci, "set mux to device mode as default\n");
+			xhci_intel_phy_mux_switch(xhci, 1);
+		}
+	} else {
+		hcd->usb_phy = NULL;
+	}
+
+	xhci_dbg(xhci, "capability init done\n");
+
+	return 0;
+}
+
+/* Only used for device mode */
+int xhci_intel_phy_vbus_valid(struct xhci_hcd *xhci, int vbus_valid)
+{
+	u32		data;
+
+	if (!xhci || !xhci->phy_mux_regs)
+		return -ENODEV;
+
+	xhci_dbg(xhci, "vbus valid for phy mux is %d\n", vbus_valid);
+
+	data = readl(xhci->phy_mux_regs + DUAL_ROLE_CFG0);
+
+	if (vbus_valid)
+		data |= SW_VBUS_VALID;
+	else
+		data &= ~SW_VBUS_VALID;
+
+	writel(data, xhci->phy_mux_regs + DUAL_ROLE_CFG0);
+
+	return 0;
+}
+EXPORT_SYMBOL_GPL(xhci_intel_phy_vbus_valid);
+
+int xhci_intel_phy_mux_switch(struct xhci_hcd *xhci, int is_device_on)
+{
+	unsigned long	timeout;
+	u32		data;
+
+	if (!xhci || !xhci->phy_mux_regs)
+		pr_err("No XHCI or Not support phy mux capability\n");
+
+	xhci_dbg(xhci, "XHCI phy mux switch to %s path\n",
+				is_device_on ? "dev" : "Host");
+
+	/* Check and set mux to SW controlled mode */
+	data = readl(xhci->phy_mux_regs + DUAL_ROLE_CFG0);
+	if (!(data & SW_IDPIN_EN)) {
+		data |= SW_IDPIN_EN;
+		writel(data, xhci->phy_mux_regs + DUAL_ROLE_CFG0);
+	}
+
+	/* Configure CFG0 to switch the mux and VBUS_VALID bit is required
+	 * for device mode
+	 */
+	data = readl(xhci->phy_mux_regs + DUAL_ROLE_CFG0);
+	if (is_device_on)
+		data |= SW_IDPIN;
+	else
+		data &= ~SW_IDPIN;
+	writel(data, xhci->phy_mux_regs + DUAL_ROLE_CFG0);
+
+	/* Polling CFG1 for safety, most case it takes about 600ms to finish
+	 * mode switching, set TIMEOUT long enough
+	 */
+	timeout = jiffies + msecs_to_jiffies(DUAL_ROLE_CFG1_POLL_TIMEOUT);
+
+	/* Polling on CFG1 register to confirm mode switch.*/
+	while (!time_after(jiffies, timeout)) {
+		data = readl(xhci->phy_mux_regs + DUAL_ROLE_CFG1);
+		if (is_device_on) {
+			if (!(data & SW_MODE))
+				break;
+		} else {
+			if (data & SW_MODE)
+				break;
+		}
+		/* interval for polling is set to about 5ms */
+		usleep_range(5000, 5100);
+	}
+
+	return 0;
+}
+EXPORT_SYMBOL_GPL(xhci_intel_phy_mux_switch);
diff --git a/drivers/usb/host/xhci-intel-cap.h b/drivers/usb/host/xhci-intel-cap.h
new file mode 100644
index 0000000..5906e5fe
--- /dev/null
+++ b/drivers/usb/host/xhci-intel-cap.h
@@ -0,0 +1,38 @@
+/*
+ * Copyright (C) 2014 Intel Corp.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful, but
+ * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
+ * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program;
+ */
+
+/* Extended capability IDs for Intel Vendor Defined */
+#define XHCI_EXT_CAPS_INTEL_HOST_CAP	192
+#define XHCI_EXT_CAPS_INTEL_SSIC	196
+#define XHCI_EXT_CAPS_INTEL_SSIC_PROFILE	197
+
+/* register definition */
+#define PMCTRL			0x34
+#define INT_PME_FLAG_CLR	(1 << 28)
+
+#define DUAL_ROLE_CFG0		0x68
+#define SW_VBUS_VALID		(1 << 24)
+#define SW_IDPIN_EN		(1 << 21)
+#define SW_IDPIN		(1 << 20)
+
+#define DUAL_ROLE_CFG1		0x6c
+#define SW_MODE			(1 << 29)
+
+#define DUAL_ROLE_CFG1_POLL_TIMEOUT	1000
+
+extern int xhci_intel_vendor_cap_init(struct xhci_hcd *xhci);
+extern int xhci_intel_phy_vbus_valid(struct xhci_hcd *xhci, int vbus_valid);
+extern int xhci_intel_phy_mux_switch(struct xhci_hcd *xhci, int is_device_on);
diff --git a/drivers/usb/host/xhci-pci.c b/drivers/usb/host/xhci-pci.c
index dd262f4..dcfbb85 100644
--- a/drivers/usb/host/xhci-pci.c
+++ b/drivers/usb/host/xhci-pci.c
@@ -27,6 +27,7 @@
 
 #include "xhci.h"
 #include "xhci-trace.h"
+#include "xhci-intel-cap.h"
 
 #define SSIC_PORT_NUM		2
 #define SSIC_PORT_CFG2		0x880c
@@ -73,6 +74,12 @@ static int xhci_pci_reinit(struct xhci_hcd *xhci, struct pci_dev *pdev)
 	 * new extended capabilities.
 	 */
 
+	/* Init Intel vendor defined extended capability */
+	if (pdev->vendor == PCI_VENDOR_ID_INTEL) {
+		if (!xhci_intel_vendor_cap_init(xhci))
+			xhci_dbg(xhci, "Intel Vendor Capability init done\n");
+	}
+
 	/* PCI Memory-Write-Invalidate cycle support is optional (uncommon) */
 	if (!pci_set_mwi(pdev))
 		xhci_dbg(xhci, "MWI active\n");
diff --git a/drivers/usb/host/xhci.h b/drivers/usb/host/xhci.h
index fc2ee6c..b1e9c74 100644
--- a/drivers/usb/host/xhci.h
+++ b/drivers/usb/host/xhci.h
@@ -1656,6 +1656,8 @@ struct xhci_hcd {
 	/* cached usb2 extened protocol capabilites */
 	u32                     *ext_caps;
 	unsigned int            num_ext_caps;
+	/* support dual role switch per vendor extended capability */
+	void __iomem		*phy_mux_regs;
 	/* Compliance Mode Recovery Data */
 	struct timer_list	comp_mode_recovery_timer;
 	u32			port_status_u0;
diff --git a/drivers/usb/phy/Kconfig b/drivers/usb/phy/Kconfig
index 22e8ecb..bad0519 100644
--- a/drivers/usb/phy/Kconfig
+++ b/drivers/usb/phy/Kconfig
@@ -213,4 +213,11 @@ config USB_ULPI_VIEWPORT
 	  Provides read/write operations to the ULPI phy register set for
 	  controllers with a viewport register (e.g. Chipidea/ARC controllers).
 
+config INTEL_CHT_PHY
+	bool "Intel Cherrytrail OTG Transceiver Driver"
+	depends on USB_OTG_FSM
+	default y
+	help
+	  Enable this to support Intel USB OTG transceiver for Cherrytrail platform
+
 endmenu
diff --git a/drivers/usb/phy/Makefile b/drivers/usb/phy/Makefile
index 19c0dcc..25d8b3a 100644
--- a/drivers/usb/phy/Makefile
+++ b/drivers/usb/phy/Makefile
@@ -27,3 +27,4 @@ obj-$(CONFIG_USB_RCAR_PHY)		+= phy-rcar-usb.o
 obj-$(CONFIG_USB_ULPI)			+= phy-ulpi.o
 obj-$(CONFIG_USB_ULPI_VIEWPORT)		+= phy-ulpi-viewport.o
 obj-$(CONFIG_KEYSTONE_USB_PHY)		+= phy-keystone.o
+obj-$(CONFIG_INTEL_CHT_PHY)		+= phy-intel-cht.o
diff --git a/drivers/usb/phy/phy-intel-cht.c b/drivers/usb/phy/phy-intel-cht.c
new file mode 100644
index 0000000..48617d3
--- /dev/null
+++ b/drivers/usb/phy/phy-intel-cht.c
@@ -0,0 +1,741 @@
+/*
+ * Intel CherryTrail USB OTG transceiver driver
+ *
+ * Copyright (C) 2014, Intel Corporation.
+ *
+ * Author: Wu, Hao
+ *
+ * This program is free software; you can redistribute it and/or modify it
+ * under the terms and conditions of the GNU General Public License,
+ * version 2, as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
+ * more details.
+ *
+ * You should have received a copy of the GNU General Public License along with
+ * this program;
+ */
+
+#include <linux/module.h>
+#include <linux/kernel.h>
+#include <linux/platform_device.h>
+#include <linux/pm_runtime.h>
+#include <linux/slab.h>
+#include <linux/timer.h>
+#include <linux/usb.h>
+#include <linux/usb/gadget.h>
+#include <linux/usb/hcd.h>
+#include <linux/extcon.h>
+#include <linux/debugfs.h>
+#include <linux/seq_file.h>
+
+#include "../host/xhci.h"
+#include "../host/xhci-intel-cap.h"
+
+#include "phy-intel-cht.h"
+
+#define DRIVER_VERSION "Rev. 0.5"
+#define DRIVER_AUTHOR "Hao Wu"
+#define DRIVER_DESC "Intel CherryTrail USB OTG Transceiver Driver"
+#define DRIVER_INFO DRIVER_DESC " " DRIVER_VERSION
+
+#define FPO0_USB_COMP_OFFSET	0x01
+
+#define USB_VBUS_DRAW_HIGH	500
+#define USB_VBUS_DRAW_SUPER	900
+
+
+static const char driver_name[] = "intel-cht-otg";
+
+static struct cht_otg *cht_otg_dev;
+
+static int edev_state_to_id(struct extcon_dev *evdev)
+{
+	int state;
+
+	state = extcon_get_cable_state(evdev, "USB-Host");
+
+	return !evdev->state;
+}
+
+static int cht_otg_set_id_mux(struct cht_otg *otg_dev, int id)
+{
+	struct usb_bus *host = otg_dev->phy.otg->host;
+	struct usb_gadget *gadget = otg_dev->phy.otg->gadget;
+	struct usb_hcd *hcd;
+	struct xhci_hcd *xhci;
+
+	if (!host || !gadget || !gadget->dev.parent)
+		return -ENODEV;
+
+	hcd = bus_to_hcd(host);
+	xhci = hcd_to_xhci(hcd);
+
+	/* HACK: PHY used in Cherrytrail is shared by both host and device
+	 * controller, it requires both host and device controller to be D0
+	 * for any action related to PHY transition
+	 */
+	pm_runtime_get_sync(host->controller);
+	pm_runtime_get_sync(gadget->dev.parent);
+
+	xhci_intel_phy_mux_switch(xhci, id);
+
+	pm_runtime_put(gadget->dev.parent);
+	pm_runtime_put(host->controller);
+
+	return 0;
+}
+
+static int cht_otg_set_vbus_valid(struct cht_otg *otg_dev, int vbus_valid)
+{
+	struct usb_bus *host = otg_dev->phy.otg->host;
+	struct usb_gadget *gadget = otg_dev->phy.otg->gadget;
+	struct usb_hcd *hcd;
+	struct xhci_hcd *xhci;
+
+	if (!host || !gadget || !gadget->dev.parent)
+		return -ENODEV;
+
+	hcd = bus_to_hcd(host);
+	xhci = hcd_to_xhci(hcd);
+
+	/* HACK: PHY used in Cherrytrail is shared by both host and device
+	 * controller, it requires both host and device controller to be D0
+	 * for any action related to PHY transition
+	 */
+	pm_runtime_get_sync(host->controller);
+	pm_runtime_get_sync(gadget->dev.parent);
+
+	xhci_intel_phy_vbus_valid(xhci, vbus_valid);
+
+	pm_runtime_put(gadget->dev.parent);
+	pm_runtime_put(host->controller);
+
+	return 0;
+}
+
+static int cht_otg_start_host(struct otg_fsm *fsm, int on)
+{
+	struct usb_otg *otg = fsm->otg;
+	struct cht_otg *otg_dev = container_of(otg->usb_phy, struct cht_otg, phy);
+	int retval;
+
+	dev_info(&otg->phy->dev, "%s --->\n", __func__);
+
+	if (!otg->host)
+		return -ENODEV;
+
+	/* Just switch the mux to host path */
+	retval = cht_otg_set_id_mux(otg_dev, !on);
+
+	dev_info(&otg->phy->dev, "%s <---\n", __func__);
+
+	return retval;
+}
+
+static int cht_otg_start_gadget(struct otg_fsm *fsm, int on)
+{
+	struct usb_otg *otg = fsm->otg;
+	struct cht_otg *otg_dev = container_of(otg->usb_phy, struct cht_otg, phy);
+	int retval;
+
+	dev_info(&otg->phy->dev, "%s --->\n", __func__);
+
+	if (!otg->gadget)
+		return -ENODEV;
+
+	retval = cht_otg_set_vbus_valid(otg_dev, on);
+
+	dev_info(&otg->phy->dev, "%s <---\n", __func__);
+
+	return retval;
+}
+
+/* SRP / HNP / ADP are not supported, only simple dual role function
+ * start gadget function is not implemented as controller will take
+ * care itself per VBUS event
+ */
+static struct otg_fsm_ops cht_otg_ops = {
+	.start_host = cht_otg_start_host,
+	.start_gadget = cht_otg_start_gadget,
+};
+
+static int cht_otg_set_power(struct usb_phy *phy, unsigned mA)
+{
+	struct usb_gadget *gadget = cht_otg_dev->fsm.otg->gadget;
+
+	dev_dbg(phy->dev, "%s --->\n", __func__);
+
+	if (!cht_otg_dev)
+		return -ENODEV;
+
+	/* VBUS drop event from EM part may come firstly to phy-intel-cht and
+	 * suspend event from device stack may come later than the VBUS drop
+	 * event. suspend event will trigger usb_gadget_vbus_draw 2mA when
+	 * b_sess_vld is already clear to 0. It will cause conflict events
+	 * received by other components, (e.g otg-wakelock)
+	 */
+	if (!cht_otg_dev->fsm.b_sess_vld)
+		return -ENODEV;
+
+	if (cht_otg_dev->fsm.otg->state != OTG_STATE_B_PERIPHERAL)
+		dev_err(phy->dev, "ERR: Draw %d mA in state %s\n",
+			mA, usb_otg_state_string(cht_otg_dev->fsm.otg->state));
+
+	/* For none-compliance mode, ignore the given value
+	 * and always draw maximum.
+	 */
+	if (!cht_otg_dev->compliance) {
+		if (gadget->speed == USB_SPEED_SUPER)
+			mA = USB_VBUS_DRAW_SUPER;
+		else
+			mA = USB_VBUS_DRAW_HIGH;
+	}
+
+	/* Notify other drivers that device enumerated or not.
+	 * e.g It is needed by some charger driver, to set
+	 * charging current for SDP case
+	 */
+	atomic_notifier_call_chain(&cht_otg_dev->phy.notifier,
+					USB_EVENT_ENUMERATED, &mA);
+	dev_info(phy->dev, "Draw %d mA\n", mA);
+
+	dev_dbg(phy->dev, "%s <---\n", __func__);
+
+	return 0;
+}
+
+/*
+ * Called by initialization code of host driver. Register host
+ * controller to the OTG.
+ */
+static int cht_otg_set_host(struct usb_otg *otg, struct usb_bus *host)
+{
+	struct cht_otg *otg_dev;
+
+	if (!otg || !host)
+		return -ENODEV;
+
+	otg_dev = container_of(otg->usb_phy, struct cht_otg, phy);
+	if (otg_dev != cht_otg_dev)
+		return -EINVAL;
+
+	otg->host = host;
+
+	/* once host registered, then kick statemachine to move
+	 * to A_HOST if id is grounded
+	 */
+	otg_dev->fsm.a_bus_drop = 0;
+	otg_dev->fsm.a_bus_req = 0;
+
+	/* check default ID value when host registered */
+	if (otg_dev->cable_nb.edev)
+		otg_dev->fsm.id = edev_state_to_id(otg_dev->cable_nb.edev);
+
+	/* if gadget is registered already then kick the state machine.
+	 * Only trigger the mode switch once both host and device are
+	 * registered
+	 */
+	if (otg_dev->phy.otg->gadget)
+		otg_statemachine(&otg_dev->fsm);
+
+	return 0;
+}
+
+/*
+ * Called by initialization code of udc. Register udc to OTG.
+ */
+static int cht_otg_set_peripheral(struct usb_otg *otg,
+					struct usb_gadget *gadget)
+{
+	struct cht_otg *otg_dev;
+
+	if (!otg || !gadget)
+		return -ENODEV;
+
+	otg_dev = container_of(otg->usb_phy, struct cht_otg, phy);
+	if (otg_dev != cht_otg_dev)
+		return -EINVAL;
+
+	otg->gadget = gadget;
+	otg->gadget->is_otg = 1;
+
+	otg_dev->fsm.b_bus_req = 1;
+
+	/* if host is registered already then kick the state machine.
+	 * Only trigger the mode switch once both host and device are
+	 * registered
+	 */
+	if (otg_dev->phy.otg->host)
+		otg_statemachine(&otg_dev->fsm);
+
+	return 0;
+}
+
+static int cht_otg_start(struct platform_device *pdev)
+{
+	struct cht_otg *otg_dev;
+	struct usb_phy *phy_dev;
+	struct otg_fsm *fsm;
+
+	phy_dev = usb_get_phy(USB_PHY_TYPE_USB2);
+	if (!phy_dev)
+		return -ENODEV;
+
+	otg_dev = container_of(phy_dev, struct cht_otg, phy);
+	fsm = &otg_dev->fsm;
+
+	/* Initialize the state machine structure with default values */
+	fsm->otg = otg_dev->phy.otg;
+	fsm->otg->state = OTG_STATE_UNDEFINED;
+	mutex_init(&fsm->lock);
+
+	/* Initialize the id value to default 1 */
+	fsm->id = 1;
+	otg_statemachine(fsm);
+
+	dev_info(&pdev->dev, "initial ID pin set to %d\n", fsm->id);
+
+	return 0;
+}
+
+static void cht_otg_stop(struct platform_device *pdev)
+{
+	if (!cht_otg_dev)
+		return;
+
+	if (cht_otg_dev->regs)
+		iounmap(cht_otg_dev->regs);
+}
+
+static int cht_host_gadget_ready(struct cht_otg *otg_dev)
+{
+	if (otg_dev && otg_dev->phy.otg->host && otg_dev->phy.otg->gadget)
+		return 1;
+
+	return 0;
+}
+
+static int cht_otg_handle_notification(struct notifier_block *nb,
+				unsigned long event, void *data)
+{
+	int state;
+
+	if (!cht_otg_dev)
+		return NOTIFY_BAD;
+
+	switch (event) {
+	/* USB_EVENT_VBUS: vbus valid event */
+	case USB_EVENT_VBUS:
+		dev_info(cht_otg_dev->phy.dev, "USB_EVENT_VBUS vbus valid\n");
+		if (cht_otg_dev->fsm.id)
+			cht_otg_dev->fsm.b_sess_vld = 1;
+		/* don't kick the state machine if host or device controller
+		 * is not registered. Just wait to kick it when set_host or
+		 * set_peripheral.
+		 */
+		if (cht_host_gadget_ready(cht_otg_dev))
+			schedule_work(&cht_otg_dev->fsm_work);
+		state = NOTIFY_OK;
+		break;
+	/* USB_EVENT_ID: id was grounded */
+	case USB_EVENT_ID:
+		dev_info(cht_otg_dev->phy.dev, "USB_EVENT_ID id ground\n");
+		cht_otg_dev->fsm.id = 0;
+		/* Same as above */
+		if (cht_host_gadget_ready(cht_otg_dev))
+			schedule_work(&cht_otg_dev->fsm_work);
+		state = NOTIFY_OK;
+		break;
+	/* USB_EVENT_NONE: no events or cable disconnected */
+	case USB_EVENT_NONE:
+		dev_info(cht_otg_dev->phy.dev,
+					"USB_EVENT_NONE cable disconnected\n");
+		if (cht_otg_dev->fsm.id == 0)
+			cht_otg_dev->fsm.id = 1;
+		else if (cht_otg_dev->fsm.b_sess_vld)
+			cht_otg_dev->fsm.b_sess_vld = 0;
+		else
+			dev_err(cht_otg_dev->phy.dev, "why USB_EVENT_NONE?\n");
+		/* Same as above */
+		if (cht_host_gadget_ready(cht_otg_dev))
+			schedule_work(&cht_otg_dev->fsm_work);
+		state = NOTIFY_OK;
+		break;
+	default:
+		dev_info(cht_otg_dev->phy.dev, "unknown notification\n");
+		state = NOTIFY_DONE;
+		break;
+	}
+
+	return state;
+}
+
+static void cht_otg_fsm_work(struct work_struct *work)
+{
+	if (!cht_otg_dev)
+		return;
+
+	otg_statemachine(&cht_otg_dev->fsm);
+}
+
+static int fsm_show(struct seq_file *s, void *unused)
+{
+	struct cht_otg *otg_dev = s->private;
+	struct otg_fsm *fsm = &otg_dev->fsm;
+
+	mutex_lock(&fsm->lock);
+
+	seq_printf(s, "OTG state: %s\n\n",
+			usb_otg_state_string(fsm->otg->state));
+
+	seq_printf(s, "a_bus_req: %d\n"
+			"b_bus_req: %d\n"
+			"a_bus_resume: %d\n"
+			"a_bus_suspend: %d\n"
+			"a_conn: %d\n"
+			"a_sess_vld: %d\n"
+			"a_srp_det: %d\n"
+			"a_vbus_vld: %d\n"
+			"b_bus_resume: %d\n"
+			"b_bus_suspend: %d\n"
+			"b_conn: %d\n"
+			"b_se0_srp: %d\n"
+			"b_ssend_srp: %d\n"
+			"b_sess_vld: %d\n"
+			"id: %d\n",
+			fsm->a_bus_req,
+			fsm->b_bus_req,
+			fsm->a_bus_resume,
+			fsm->a_bus_suspend,
+			fsm->a_conn,
+			fsm->a_sess_vld,
+			fsm->a_srp_det,
+			fsm->a_vbus_vld,
+			fsm->b_bus_resume,
+			fsm->b_bus_suspend,
+			fsm->b_conn,
+			fsm->b_se0_srp,
+			fsm->b_ssend_srp,
+			fsm->b_sess_vld,
+			fsm->id);
+
+	mutex_unlock(&fsm->lock);
+
+	return 0;
+}
+
+static int fsm_open(struct inode *inode, struct file *file)
+{
+	return single_open(file, fsm_show, inode->i_private);
+}
+
+static const struct file_operations fsm_fops = {
+	.open			= fsm_open,
+	.read			= seq_read,
+	.llseek			= seq_lseek,
+	.release		= single_release,
+};
+
+
+static int vbus_evt_show(struct seq_file *s, void *unused)
+{
+	struct otg_fsm *fsm;
+	struct cht_otg *otg_dev = s->private;
+
+	if (!otg_dev)
+		return -EINVAL;
+
+	fsm = &otg_dev->fsm;
+
+	if (otg_dev->fsm.b_sess_vld)
+		seq_puts(s, "VBUS high\n");
+	else
+		seq_puts(s, "VBUS low\n");
+
+	return 0;
+}
+
+static int vbus_evt_open(struct inode *inode, struct file *file)
+{
+	return single_open(file, vbus_evt_show, inode->i_private);
+}
+
+static ssize_t vbus_evt_write(struct file *file,
+		const char __user *ubuf, size_t count, loff_t *ppos)
+{
+	struct seq_file		*s = file->private_data;
+	struct cht_otg		*otg_dev = s->private;
+	char			buf;
+
+	if (count != 2)
+		return -EINVAL;
+
+	/* only need the first character */
+	if (copy_from_user(&buf, ubuf, 1))
+		return -EFAULT;
+
+	switch (buf) {
+	case '1':
+		dev_info(otg_dev->phy.dev, "VBUS = 1\n");
+		atomic_notifier_call_chain(&otg_dev->phy.notifier,
+			USB_EVENT_VBUS, NULL);
+		return count;
+	case '0':
+		dev_info(otg_dev->phy.dev, "VBUS = 0\n");
+		atomic_notifier_call_chain(&otg_dev->phy.notifier,
+			USB_EVENT_NONE, NULL);
+		return count;
+	default:
+		return -EINVAL;
+	}
+	return count;
+}
+
+static const struct file_operations vbus_evt_fops = {
+	.open			= vbus_evt_open,
+	.write			= vbus_evt_write,
+	.read			= seq_read,
+	.llseek			= seq_lseek,
+	.release		= single_release,
+};
+
+static int otg_id_show(struct seq_file *s, void *unused)
+{
+	struct cht_otg		*otg_dev = s->private;
+
+	if (otg_dev->fsm.id)
+		seq_puts(s, "ID float\n");
+	else
+		seq_puts(s, "ID gnd\n");
+
+	return 0;
+}
+
+static int otg_id_open(struct inode *inode, struct file *file)
+{
+	return single_open(file, otg_id_show, inode->i_private);
+}
+
+static ssize_t otg_id_write(struct file *file,
+		const char __user *ubuf, size_t count, loff_t *ppos)
+{
+	struct seq_file		*s = file->private_data;
+	struct cht_otg		*otg_dev = s->private;
+	char			buf;
+
+	if (count != 2)
+		return -EINVAL;
+
+	/* only need the first character */
+	if (copy_from_user(&buf, ubuf, 1))
+		return -EFAULT;
+
+	switch (buf) {
+	case '0':
+	case 'a':
+	case 'A':
+		dev_info(otg_dev->phy.dev, "ID = 0\n");
+		atomic_notifier_call_chain(&otg_dev->phy.notifier,
+			USB_EVENT_ID, NULL);
+		return count;
+	case '1':
+	case 'b':
+	case 'B':
+		dev_info(otg_dev->phy.dev, "ID = 1\n");
+		atomic_notifier_call_chain(&otg_dev->phy.notifier,
+			USB_EVENT_NONE, NULL);
+		return count;
+	default:
+		return -EINVAL;
+	}
+
+	return count;
+}
+
+static const struct file_operations otg_id_fops = {
+	.open			= otg_id_open,
+	.write			= otg_id_write,
+	.read			= seq_read,
+	.llseek			= seq_lseek,
+	.release		= single_release,
+};
+
+static int cht_handle_extcon_otg_event(struct notifier_block *nb,
+					unsigned long event, void *param)
+{
+	struct extcon_dev *edev = param;
+	int id = edev_state_to_id(edev);
+	struct usb_bus *host;
+	struct usb_gadget *gadget;
+
+	if (!cht_otg_dev)
+		return NOTIFY_DONE;
+
+	host = cht_otg_dev->phy.otg->host;
+	gadget = cht_otg_dev->phy.otg->gadget;
+
+	dev_info(cht_otg_dev->phy.dev, "[extcon notification]: USB-Host: %s\n",
+			id ? "Disconnected" : "connected");
+
+	/* update id value and schedule fsm work to start/stop host per id */
+	cht_otg_dev->fsm.id = id;
+
+	/* don't kick the state machine if host or device controller
+	 * is not registered. Just wait to kick it when set_host or
+	 * set_peripheral.
+	 */
+	if (host && gadget)
+		schedule_work(&cht_otg_dev->fsm_work);
+
+	return NOTIFY_OK;
+}
+
+static int cht_otg_probe(struct platform_device *pdev)
+{
+	struct cht_otg *cht_otg;
+	struct dentry *root;
+	struct dentry *file;
+	int status;
+
+	cht_otg = kzalloc(sizeof(struct cht_otg), GFP_KERNEL);
+	if (!cht_otg)
+		return -ENOMEM;
+
+	cht_otg->phy.otg = kzalloc(sizeof(struct usb_otg), GFP_KERNEL);
+	if (!cht_otg->phy.otg) {
+		kfree(cht_otg);
+		return -ENOMEM;
+	}
+
+	/* Set OTG state machine operations */
+	cht_otg->fsm.ops = &cht_otg_ops;
+
+	/* initialize the otg and phy structure */
+	cht_otg->phy.label = DRIVER_DESC;
+	cht_otg->phy.dev = &pdev->dev;
+	cht_otg->phy.set_power = cht_otg_set_power;
+
+	cht_otg->phy.otg->usb_phy = &cht_otg->phy;
+	cht_otg->phy.otg->set_host = cht_otg_set_host;
+	cht_otg->phy.otg->set_peripheral = cht_otg_set_peripheral;
+
+	/* No support for ADP, HNP and SRP */
+	cht_otg->phy.otg->start_hnp = NULL;
+	cht_otg->phy.otg->start_srp = NULL;
+
+
+	INIT_WORK(&cht_otg->fsm_work, cht_otg_fsm_work);
+
+	cht_otg_dev = cht_otg;
+
+	status = usb_add_phy(&cht_otg_dev->phy, USB_PHY_TYPE_USB2);
+	if (status) {
+		dev_err(&pdev->dev, "failed to add cht otg usb phy\n");
+		goto err1;
+	}
+
+	cht_otg_dev->nb.notifier_call = cht_otg_handle_notification;
+	usb_register_notifier(&cht_otg_dev->phy, &cht_otg_dev->nb);
+
+	/* Register on extcon for OTG event too */
+	cht_otg_dev->id_nb.notifier_call = cht_handle_extcon_otg_event;
+	status = extcon_register_interest(&cht_otg_dev->cable_nb, NULL,
+					"USB-Host", &cht_otg_dev->id_nb);
+	if (status)
+		dev_warn(&pdev->dev, "failed to register extcon notifier\n");
+
+#ifdef CONFIG_ACPI
+	cht_otg->compliance = 0;
+#endif
+
+	/* init otg-fsm */
+	status = cht_otg_start(pdev);
+	if (status) {
+		dev_err(&pdev->dev, "failed to add cht otg usb phy\n");
+		goto err2;
+	}
+
+	root = debugfs_create_dir(dev_name(&pdev->dev), NULL);
+	if (!root) {
+		status = -ENOMEM;
+		goto err2;
+	}
+
+	cht_otg_dev->root = root;
+
+	file = debugfs_create_file("fsm", S_IRUGO, root,
+					cht_otg_dev, &fsm_fops);
+	if (!file) {
+		status = -ENOMEM;
+		goto err3;
+	}
+
+	file = debugfs_create_file("otg_id", S_IRUGO | S_IWUSR | S_IWGRP, root,
+					cht_otg_dev, &otg_id_fops);
+	if (!file) {
+		status = -ENOMEM;
+		goto err3;
+	}
+
+	file = debugfs_create_file("vbus_evt", S_IRUGO | S_IWUSR | S_IWGRP,
+					root, cht_otg_dev, &vbus_evt_fops);
+	if (!file) {
+		status = -ENOMEM;
+		goto err3;
+	}
+
+	return 0;
+
+err3:
+	debugfs_remove_recursive(root);
+err2:
+	cht_otg_stop(pdev);
+	extcon_unregister_interest(&cht_otg_dev->cable_nb);
+	usb_remove_phy(&cht_otg_dev->phy);
+err1:
+	kfree(cht_otg->phy.otg);
+	kfree(cht_otg);
+	return status;
+}
+
+static int cht_otg_remove(struct platform_device *pdev)
+{
+	debugfs_remove_recursive(cht_otg_dev->root);
+
+	cht_otg_stop(pdev);
+	extcon_unregister_interest(&cht_otg_dev->cable_nb);
+	usb_remove_phy(&cht_otg_dev->phy);
+
+	kfree(cht_otg_dev->phy.otg);
+	kfree(cht_otg_dev);
+
+	return 0;
+}
+
+struct platform_driver intel_cht_otg_driver = {
+	.probe = cht_otg_probe,
+	.remove = cht_otg_remove,
+	.driver = {
+		.name = driver_name,
+		.owner = THIS_MODULE,
+	},
+};
+
+static int __init cht_otg_phy_init(void)
+{
+	return platform_driver_register(&intel_cht_otg_driver);
+}
+subsys_initcall(cht_otg_phy_init);
+
+static void __exit cht_otg_phy_exit(void)
+{
+	platform_driver_unregister(&intel_cht_otg_driver);
+}
+module_exit(cht_otg_phy_exit);
+
+MODULE_DESCRIPTION(DRIVER_INFO);
+MODULE_AUTHOR(DRIVER_AUTHOR);
+MODULE_LICENSE("GPL");
diff --git a/drivers/usb/phy/phy-intel-cht.h b/drivers/usb/phy/phy-intel-cht.h
new file mode 100644
index 0000000..a29ceab
--- /dev/null
+++ b/drivers/usb/phy/phy-intel-cht.h
@@ -0,0 +1,34 @@
+/*
+ * Intel CherryTrail USB OTG Transceiver driver
+ *
+ * Copyright (C) 2014, Intel Corporation.
+ *
+ * This program is free software; you can redistribute  it and/or modify it
+ * under  the terms of  the GNU General  Public License as published by the
+ * Free Software Foundation;  either version 2 of the  License, or (at your
+ * option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful, but
+ * WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * General Public License for more details.
+ *
+ * You should have received a copy of the  GNU General Public License along
+ * with this program; if not, write  to the Free Software Foundation, Inc.,
+ * 675 Mass Ave, Cambridge, MA 02139, USA.
+ */
+
+#include <linux/usb/otg-fsm.h>
+#include <linux/usb/otg.h>
+
+struct cht_otg {
+	struct usb_phy phy;
+	struct otg_fsm fsm;
+	struct notifier_block nb;
+	struct extcon_specific_cable_nb cable_nb;
+	struct notifier_block id_nb;
+	struct work_struct fsm_work;
+	void __iomem *regs;
+	int compliance:1;
+	struct dentry *root;
+};
-- 
2.9.3

